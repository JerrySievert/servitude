{"name":"Servitude","body":"# Servitude\r\n\r\n[![Build Status](https://secure.travis-ci.org/JerrySievert/servitude.png)](http://travis-ci.org/JerrySievert/servitude)\r\n\r\nSuper fast sugar for optimizing CSS and JavaScript.\r\n\r\nServitude combines CSS and JavaScript into a single fast and cacheable file, speeding up your site without a ton of extra work.\r\n\r\nIt's easy, just drop your JavaScript and CSS into a directory, point to it, and list out what you want to include in the order you want to include it.  `servitude` will inject it into the DOM and your application will be better for it.  No more tons of requests, a single request and everything becomes ready to use.\r\n\r\nOptimize without even thinking about it.\r\n\r\nSupport out of the box for:\r\n\r\n* CSS\r\n* JavaScript\r\n* CoffeeScript\r\n* Stylus\r\n* Less\r\n* Pluggable Filters\r\n\r\n# Installing\r\n\r\n    $ npm install servitude\r\n\r\n# Usage\r\n\r\n## Server Side\r\n\r\n    var servitude = require('servitude');\r\n    var bricks = require('bricks');\r\n    \r\n    var appServer = new bricks.appserver();\r\n    \r\n    appServer.addRoute(\"/servitude(.+)\", servitude, { basedir: \"./files\" });\r\n    var server = appServer.createServer();\r\n    \r\n    server.listen(3000);\r\n\r\n## Client Side\r\n\r\n    <!-- include js/jquery.js and css/site.css in one fell swoop -->\r\n    <script type=\"text/javascript\" src=\"/servitude/js/jquery.js,/css/site.css\"></script>\r\n    <!-- include even more, you can use servitude as many times as you need -->\r\n    <script type=\"text/javascript\" src=\"/servitude/js/templates.js,/css/templates.css\"></script>\r\n\r\n# Advanced Usage\r\n\r\n## Server Side\r\n\r\n### Caching\r\n\r\nEnabling caching stores requested files in memory, and only re-retrieves and re-processes a file if it has been changed on disk.\r\n\r\n    appServer.addRoute(\"/servitude/(.+)\", servitude, { basedir: \"./files\", cache: true });\r\n\r\n### Uglify\r\n\r\nIf `uglify` is enabled in the `options`, an attempt is made to `uglify` any JavaScript that has been requested.  Note, this occurs even if the JavaScript has been previously minified, as well as for any `.coffee` file that has been compiled.  This may not be desired behavior, so this is turned off by default\r\n\r\n    appServer.addRoute(\"/servitude/(.+)\", servitude, { basedir: \"./files\", uglify: true });\r\n\r\n### Filters\r\n\r\nFilters are more powerful and allow you to process any file as you would like.  This is a good way to add something like `Handlebars` template compilation.  Simply set the `processed` property on the `record` to \r\n\r\n    var filter = function (record, options, callback) {\r\n      record.data = 'var Templates = Templates || { };' +\r\n                   'Templates[\\\"' + record.filename + '\\\"] = Handlebars.template(\"' + handlebars.precompile(record.data) + '\");';\r\n    \r\n      record.processed = 'injectJS(' + JSON.stringify(record)  + ');';\r\n      callback(null, record);\r\n    };\r\n    \r\n    appServer.addRoute(\"/servitude/(.+)\", servitude, {basedir: \"./files\", filters: { \".+handlebars$\": filter } });\r\n\r\n\r\n## Client Side\r\n\r\nA `servitude` object is returned with all methods for injection into the DOM.\r\n\r\n    \r\n    if (servitude.errors.length) {\r\n      console.log(\"errors: \");\r\n      console.dir(servitude.errors);\r\n    }\r\n\r\nInjection occurs via the `servitude.injectCSS()`  and `servitude.injectJS()` methods upon load.\r\n","tagline":"JavaScript and CSS Sugar Middleware","google":"UA-6127454-7","note":"Don't delete this file! It's used internally to help with page regeneration."}